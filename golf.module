<?php
/**
 * @file
 * The main codebase for golf_contenst.
 *
 */


define('PENALTY_VALUE', 36);

/**
 * Implements hook_init().
 */
function golf_init() {
  drupal_add_js(drupal_get_path('module', 'golf') . '/js/golf.js');
}


/**
 * Implement hook_form()
 */
function golf_form($node, $form_state) {
    return node_content_form($node, $form_state);
}



/**
 * Implements hook_theme().
 */
function golf_theme($existing, $type, $theme, $path) {
  return array(
    'contest_results' => array(
      'variables' => NULL,
      'template' => 'templates/contest-results',
    ),
    'tournament_contests' => array(
      'variables' => NULL,
      'template' => 'templates/tournament-contests',
    ),
    'tournament_ranking' => array(
      'variables' => NULL,
      'template' => 'templates/tournament-ranking',
    ),
    'tournament_stats' => array(
      'variables' => NULL,
      'template' => 'templates/tournament-stats',
    ),
  );
}

function get_contest_scorecards($contest_id) {
  $query = db_select('field_revision_field_contest', 'f');
  $query->condition('field_contest_target_id', $contest_id);
  $query->fields('f', array('entity_id'));        
  $result = $query->execute();
  $nids = array();
  while ($record = $result->fetchAssoc()) {
    $nids[] = $record['entity_id'];
  }

  $nodes = array();
  
  if (count($nids) > 0)
    $nodes = node_load_multiple($nids, array('type' => 'golf_round'));

  $scorecards = array();

  foreach ($nodes as $key => $value) {
    $scorecards[] = get_round_scorecard($value->nid);
  }
  

  $contest_results = contest_results($contest_id, $scorecards);

  return $contest_results;
}

/**
 * Implements hook_form_alter().
 */
function golf_form_alter(&$form, $form_state, $form_id) {
  $enabled_forms = array(
    'round_node_form',
    'course_node_form'
  );
  
  if (in_array($form_id, $enabled_forms)) {
    $module_path = drupal_get_path('module', 'golf');
    drupal_add_css($module_path . '/css/golf-admin.css');
  }

  if ($form_id == 'golf_round_node_form') {
    $contest_id = (isset($_GET['contest_id']) ? $_GET['contest_id'] : FALSE);

    if ($contest_id) {
      $form['field_contest']['und']['#default_value'] = array($contest_id);
    }

  }

  if ($form_id == 'golf_contest_node_form') { 
    $tournament_id = (isset($_GET['tournament_id']) ? $_GET['tournament_id'] : FALSE);

    if ($tournament_id) {
      $form['field_tournament']['und']['#default_value'] = array($tournament_id);
    }
  }

}

function print_tournament_page_content($contests) {
  $tournament_results = array();

  $tournament_results['html'] = array(
    'ranking' => FALSE,
    'contests' => FALSE,
    'stats' => FALSE
  );

  if ( (arg(0) == 'node') && (is_numeric(arg(1))) ){
    $tournament_results['tournament'] = node_load(arg(1)); 
  }

  $vars = array('contests' => $contests);
  $tournament_results['html']['contests'] = theme('tournament_contests', $vars);
    
  $players = array();


  foreach ($contests as $i => $contest) {

    if ($contest['publish_results'] == 0) continue;
    if (!$contest['players']) continue;


    foreach ($contest['players'] as $j => $data) {
      $player_id = $data['player']->nid;
      
      if (!isset($players[$player_id])) {
        $players[$player_id] = array(
          'player' => $data['player'],
          'contests_played' => 0,
          'contests' => array(),
          'stats' => array(
          ),
        );

      }
      $players[$player_id]['contests'][$i] = $data;
      $players[$player_id]['contests_played']++;

      foreach ($data['stats'] as $k => $stat) {
        
        
        // averages
        $average_keys = array('par3_average', 'par4_average', 'par5_average');
        if (in_array($k, $average_keys)) {
          if ($k == 'par3_average') {
            if ($players[$player_id]['stats']['par3_count'] > 0)
              $players[$player_id]['stats']['par3_average'] = $players[$player_id]['stats']['par3_hits'] / $players[$player_id]['stats']['par3_count'];
          }
          if ($k == 'par4_average') {
            if ($players[$player_id]['stats']['par4_count'] > 0)
              $players[$player_id]['stats']['par4_average'] = $players[$player_id]['stats']['par4_hits'] / $players[$player_id]['stats']['par4_count'];
          }
          if ($k == 'par5_average') {
            if ($players[$player_id]['stats']['par5_count'] > 0)
             $players[$player_id]['stats']['par5_average'] = $players[$player_id]['stats']['par5_hits'] / $players[$player_id]['stats']['par5_count'];
          }
          continue;
        }

        if (!array_key_exists($k, $players[$player_id]['stats'])) {
          $players[$player_id]['stats'][$k] = $data['stats'][$k];
        }
        else {
          $players[$player_id]['stats'][$k] += $data['stats'][$k];
        } 
        
      }


    }


  } // foreach ($contests as $i => $contest)


    // penaltize when missing contests

    $number_of_contests = count($contests);
    $number_of_contests = 0;
    foreach ($contests as $key => $contest) {
      if (!$contest) continue;
      if ($contest['contest']) {
        $field_publish_results = field_get_items('node', $contest['contest'], 'field_publish_results');
        if (isset($field_publish_results[0]['value'])) {
          if ($field_publish_results[0]['value'] == 1) $number_of_contests++;
        }
      }
    }

    foreach ($players as $id => $pl) {
      if ($number_of_contests > 0) {
        $players[$id]['stats']['penalty'] = ($number_of_contests-$pl['contests_played'])*PENALTY_VALUE;
        $players[$id]['stats']['net_score'] += $players[$id]['stats']['penalty'];
      }
    }

    
    $tournament = $tournament_results['tournament'];

    $tournament_results['tournament']->sort = 'stroke_play_hcp';

    if (isset($tournament->field_game_type) ) {
      $tournament_results['tournament']->sort = $tournament->field_game_type['und'][0]['value'];
    }
    
    switch ($tournament_results['tournament']->sort) {
      case 'stroke_play_hcp':
        usort($players, "sort_overall_ranking_by_net_score");
        break;
      
      default:
        usort($players, "sort_overall_ranking_by_total_score");
        break;
    }    

    $tournament_results['players'] = $players;
    $tournament_results['contests'] = $contests;
    // dsm($tournament_results,'dasdas');
    if (count($players) > 0) {
      $tournament_results['html']['ranking'] = get_tournament_ranking_markup($tournament_results);
      $tournament_results['html']['stats'] = get_tournament_stats_markup($tournament_results);
    }
    
  return $tournament_results;

}

/**
 * Implements hook_node_view().
 */
function golf_node_view($node, $view_mode, $langcode) {
  $module_path = drupal_get_path('module', 'golf');
  drupal_add_css($module_path . '/css/golf.css');

  if ($node->type == 'golf_tournament' && $view_mode == 'full') { 

    $query = db_select('node', 'n')
              ->fields('n', array('nid'))
              ->condition('n.status', 1)
              ->condition('n.type', 'golf_contest');

    $myselect = db_select('field_revision_field_tournament', 'field')
      ->fields('field', array('entity_id', 'field_tournament_target_id'))
      ->condition('field.field_tournament_target_id', $node->nid);
    $alias = $query->join($myselect, 'f', 'n.nid = f.entity_id');

    $result = $query->execute();
    $contests = array();

    while ($record = $result->fetchAssoc()) {
        $contests[$record['nid']] = get_contest_scorecards($record['nid']);
    }


    if (count($contests)) : 

      $tournament_results = print_tournament_page_content($contests);

      $node->content['tournament-ranking'] = array(
        '#markup' => $tournament_results['html']['ranking'],
        '#weight' => 10,
        '#type' => 'markup'
      );

      $node->content['contest-results'] = array(
            '#markup' => $tournament_results['html']['contests'],
            '#weight' => 11,
            '#type' => 'markup'
      );

      $node->content['tournament-stats'] = array(
        '#markup' => $tournament_results['html']['stats'],
        '#weight' => 13,
        '#type' => 'markup'
      );
    endif;



  }

  if ($node->type == 'golf_contest') {  

    $query = db_select('node', 'n')
              ->fields('n', array('nid'))
              ->condition('n.status', 1)
              ->condition('n.type', 'golf_round');

    $myselect = db_select('field_revision_field_contest', 'field')
      ->fields('field', array('entity_id', 'field_contest_target_id'))
      ->condition('field.field_contest_target_id', $node->nid);
    $alias = $query->join($myselect, 'f', 'n.nid = f.entity_id');


    $result = $query->execute();
    $nids = array();
    while ($record = $result->fetchAssoc()) {
      $nids[] = $record['nid'];
    }

    if (count($nids) > 0) {
        $nodes = node_load_multiple($nids, array('type' => 'golf_round'));

        $scorecards = array();

        foreach ($nodes as $key => $value) {
          $scorecards[] = get_round_scorecard($value->nid);
        }

        $contest_results = contest_results($node->nid, $scorecards);

        $node->content['contest_results'] = array(
          '#markup' => $contest_results['html'],
          '#weight' => 20,
          '#type' => 'markup'
        );
   }
    

  }

  if ($node->type == 'golf_round') {
    $contest = node_load($node->field_contest['und'][0]['target_id']);
    $player = node_load($node->field_player['und'][0]['target_id']);
    $output = $player->title;

    if ($contest) 
      $output .= ' - ' . $contest->title;

    $scorecard = get_round_scorecard($node->nid);
    $contest_results = contest_results($node->field_contest['und'][0]['target_id'], array(0 => $scorecard));

    $node->content['contest_results'] = array(
          '#markup' => $contest_results['html'],
          '#weight' => 20,
          '#type' => 'markup'
        );

    return $output;
  }
}

function sort_holes_by_hole_number($a, $b) {
  return $a["hole"] - $b["hole"];
}

function get_round_scorecard($nid) {
  $node = node_load($nid);

  if ($node->type == 'golf_round') {
    
    $holes = array();

    foreach ($node as $key => $value) {
      if (preg_match('#^field_hole_#', $key) === 1) {
        $hole_number = (int) substr($key, -1);
        $hole_number = (int) str_replace('field_hole_', '', $key);
        
        $holes[$hole_number] = array(
          'score' => FALSE,
          'hole' => $hole_number
        );

        if (isset($value['und'][0])) {
          $holes[$hole_number]['score'] = (int)$value['und'][0]['value'];
        }
      }
    }

    // sort holes
    $holes_sorted = array();
    usort($holes, 'sort_holes_by_hole_number');
    foreach ($holes as $key => $value) {
      $hole_number = $value['hole'];
      $holes_sorted[$hole_number] = $value;
    }
    $holes = $holes_sorted;

    $field_ref_player = field_get_items('node', $node, 'field_player');
    $field_net_score = field_get_items('node', $node, 'field_net_score');
    $field_playing_hcp = field_get_items('node', $node, 'field_playing_hcp');
    $field_hcp = field_get_items('node', $node, 'field_hcp');

    $scorecard = array(
      'player_id' => $field_ref_player[0]['target_id'],
      'scores' => $holes,
      'net_score' => FALSE,
      'playing_hcp' => FALSE,
      'hcp' => FALSE,
      'round_id' => $node->nid,
      'round' => $node
    );

    if (count($field_net_score) > 0) {
      $scorecard['net_score'] = $field_net_score[0]['value'];
    }
    if (count($field_playing_hcp) > 0) {
      $scorecard['playing_hcp'] = $field_playing_hcp[0]['value'];
    }
    if (count($field_hcp) > 0) {
      $scorecard['hcp'] = $field_hcp[0]['value'];
    }

    return $scorecard;

  } 
  else return FALSE;
}

function contest_results($contest_id, $scorecards) {
  $results = array();
  $contest = node_load($contest_id);
  $field_course = field_get_items('node', $contest, 'field_course');
  $course = node_load($field_course[0]['target_id']);
  $course->holes = parse_course_holes($course);
  $course->stats = parse_course_stats($course);
    
  $player_data = array();


  foreach ($scorecards as $i => $card) {
    $player_data[$i] = array(
      'player' => node_load($scorecards[$i]['player_id']),
      'holes' => array(),
      'round_id' => $scorecards[$i]['round_id'],
      'round' => $scorecards[$i]['round'],
      'stats' => array(
        'total_score' => 0,
        'out' => 0,
        'in' => 0,
        'hole-in-one' => 0,
        'albatross' => 0,
        'eagle' => 0,
        'birdie' => 0,
        'par' => 0,
        'bogey' => 0,
        'double-bogey' => 0,
        'triple-bogey' => 0,
        'net_score' => 0,
        'par3_count' => 0,
        'par3_hits' => 0,
        'par3_average' => 0,
        'par4_count' => 0,
        'par4_hits' => 0,
        'par4_average' => 0,
        'par5_count' => 0,
        'par5_hits' => 0,
        'par5_average' => 0,
        '10_plus' => 0,
      )
    );

      


    foreach ($scorecards[$i]['scores'] as $hole => $value) {
      $score = $value['score'];

      $player_data[$i]['holes'][$hole] = array(
        'score' => $score,
        'name' => ''
      );

      // total score
      if (!$score)
        $player_data[$i]['stats']['total_score'] = FALSE;

      if ($player_data[$i]['stats']['total_score'] !== FALSE)
        $player_data[$i]['stats']['total_score'] += $score;

      // in and out 
      if ( $hole <= 9) {
        $player_data[$i]['stats']['out'] += $score;
      } 
      elseif ($hole <= 18) {
        $player_data[$i]['stats']['in'] += $score;        
      }

      // score names
      if ($score == 1) {
        $player_data[$i]['holes'][$hole]['name'] = 'hole-in-one';
        $player_data[$i]['stats']['hole-in-one']++;
      }

      // albatross
      if (($score == 2) && ($course->holes[$hole]['par'] == 5)) {
        $player_data[$i]['holes'][$hole]['name'] = 'albatross';
        $player_data[$i]['stats']['albatross']++;
      }

      // eagle
      if (($score == 2) && ($course->holes[$hole]['par'] == 4)) {
        $player_data[$i]['holes'][$hole]['name'] = 'eagle';
        $player_data[$i]['stats']['eagle']++;
      }

      if (($score == 3) && ($course->holes[$hole]['par'] == 5)) {
        $player_data[$i]['holes'][$hole]['name'] = 'eagle';
        $player_data[$i]['stats']['eagle']++;
      }

      // birdies
      if (($score == 2) && ($course->holes[$hole]['par'] == 3)) {
        $player_data[$i]['holes'][$hole]['name'] = 'birdie';
        $player_data[$i]['stats']['birdie']++;
      }

      if (($score == 3) && ($course->holes[$hole]['par'] == 4)) {
        $player_data[$i]['holes'][$hole]['name'] = 'birdie';
        $player_data[$i]['stats']['birdie']++;
      }

      if (($score == 4) && ($course->holes[$hole]['par'] == 5)) {
        $player_data[$i]['holes'][$hole]['name'] = 'birdie';
        $player_data[$i]['stats']['birdie']++;
      }


      if ($score == $course->holes[$hole]['par']) {
        $player_data[$i]['holes'][$hole]['name'] = 'par';
        $player_data[$i]['stats']['par']++;
      }

      if ($score == $course->holes[$hole]['par']+1) {
        $player_data[$i]['holes'][$hole]['name'] = 'bogey';
        $player_data[$i]['stats']['bogey']++;
      }

      if ($score == $course->holes[$hole]['par']+2) {
        $player_data[$i]['holes'][$hole]['name'] = 'double-bogey';
        $player_data[$i]['stats']['double-bogey']++;
      }

      if ($score == $course->holes[$hole]['par']+3) {
        $player_data[$i]['holes'][$hole]['name'] = 'triple-bogey';
        $player_data[$i]['stats']['triple-bogey']++;
      }

      if ($course->holes[$hole]['par'] == 3) {
        if ($score) {
          $player_data[$i]['stats']['par3_count']++;
          $player_data[$i]['stats']['par3_hits'] += $score;
          $player_data[$i]['stats']['par3_average'] = $player_data[$i]['stats']['par3_hits']/$player_data[$i]['stats']['par3_count'];
        }
      }

      if ($course->holes[$hole]['par'] == 4) {
        if ($score) {
          $player_data[$i]['stats']['par4_count']++;
          $player_data[$i]['stats']['par4_hits'] += $score;
          $player_data[$i]['stats']['par4_average'] = $player_data[$i]['stats']['par4_hits']/$player_data[$i]['stats']['par4_count'];
        }
      }

      if ($course->holes[$hole]['par'] == 5) {
        if ($score) {
          $player_data[$i]['stats']['par5_count']++;  
          $player_data[$i]['stats']['par5_hits'] += $score;
          $player_data[$i]['stats']['par5_average'] = $player_data[$i]['stats']['par5_hits']/$player_data[$i]['stats']['par5_count'];
        }
      }

      if ($score >= 10) {
        $player_data[$i]['stats']['10_plus']++;        
      }

    }

    // net score
      
    if (isset($scorecards[$i]['playing_hcp'])) {
      $course_total = $course->stats['total'];
      $player_data[$i]['stats']['net_score'] = $player_data[$i]['stats']['total_score']-$course_total-(int)$scorecards[$i]['playing_hcp'];
    }
    else {
      $player_data[$i]['stats']['net_score'] = '-';
    }

    if ($scorecards[$i]['net_score']) {
      $player_data[$i]['stats']['net_score'] = (int)$scorecards[$i]['net_score'];
    }


  }
  usort($player_data, "sort_by_net_score");
  
  $results['publish_results'] = 0;

  $field_publish_results = field_get_items('node', $contest, 'field_publish_results');
  if (isset($field_publish_results[0]['value'] ) )
    if ($field_publish_results[0]['value'] == 1)
      $results['publish_results'] = 1;

  $results['players'] = $player_data;
  $results['course'] = $course;
  $results['contest'] = $contest;
  $results['html'] = contest_results_markup($results);

  return $results;
}

function get_tournament_stats_markup($data) {
  $vars = array(
    'players' => $data['players'],
    'contests' => $data['contests']
  );
  $markup = theme('tournament_stats', $vars);
  return $markup;
}

function get_tournament_ranking_markup($data) {
  $vars = array(
    'players' => $data['players'],
    'contests' => $data['contests']
  );
  return theme('tournament_ranking', $data);
}

function sort_overall_ranking_by_net_score($a, $b) {
    return $a["stats"]["net_score"] - $b["stats"]["net_score"];
}

function sort_overall_ranking_by_total_score($a, $b) {
    return $a["stats"]["total_score"] - $b["stats"]["total_score"];
}

function sort_by_net_score($a, $b) {

  if ($a["stats"]["net_score"] == $b["stats"]["net_score"]) {
    // try playing hcp first
    $a_playing_hcp = field_get_items('node', $a['round'], 'field_playing_hcp');
    $b_playing_hcp = field_get_items('node', $b['round'], 'field_playing_hcp');

    if ($a_playing_hcp && $b_playing_hcp) {

      if ($a_playing_hcp[0]['value'] <= $b_playing_hcp[0]['value']) {
        return -1;
      }
      else {
        return 1;
      }
    }


    $a_hcp = field_get_items('node', $a['round'], 'field_hcp');
    $b_hcp = field_get_items('node', $b['round'], 'field_hcp');

    if ($a_hcp && $b_hcp) {

      if ($a_hcp[0]['value'] <= $b_hcp[0]['value']) {
        return -1;
      }
      else {
        return 1;
      }
    }
    
  }
  else
    return $a["stats"]["net_score"] - $b["stats"]["net_score"];
}

function sort_by_total_score($a, $b) {
    return $a["stats"]["total_score"] - $b["stats"]["total_score"];
}

function contest_results_markup($results) {
  $course = $results['course'];
  $players = $results['players'];
  $can_edit = user_access('administer content');
  
  $vars = array(
    'can_edit' => $can_edit,
    'course' => $course,
    'players' => $players,
    'card_color_explanations_enabled' => TRUE,
    'contest' => $results['contest']
  );

  if (count($players) > 0)
    return theme('contest_results', $vars);
  else 
    return FALSE;
}

function parse_course_holes($course) {
  $holes = array();

  foreach ($course as $key => $value) {
    if (preg_match('#^field_hole_#', $key) === 1) {

        $hole_number = (int) str_replace('field_hole_', '', $key);

        $holes[$hole_number] = array(
          'par' => (int)$value['und'][0]['value'], 
          'hole' => $hole_number
        );
      }
  }
  
  // sort holes
  $holes_sorted = array();
  usort($holes, 'sort_holes_by_hole_number');
  foreach ($holes as $key => $value) {
    $hole_number = $value['hole'];
    $holes_sorted[$hole_number] = $value;
  }
  $holes = $holes_sorted;

  return $holes;
}

function parse_course_stats($course) {
  $stats = array(
    'total' => 0
  );

  foreach ($course as $key => $value) {
    if (preg_match('#^field_hole_#', $key) === 1) {
      $stats['total'] += (int)$value['und'][0]['value'];
      }
  }
  return $stats;
}


function golf_menu() {

  $items['node/%node/add-contest'] = array(
    'title' => "Add contest",
    'access callback' => "add_contest_permissions",
    'access arguments' => array(1),
    'page callback' => "redirect_add_contest",
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20
  );

  $items['node/%node/add-round'] = array(
    'title' => "Add round",
    'access callback' => "add_round_permissions",
    'access arguments' => array(1),
    'page callback' => "redirect_add_round",
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20

  );

  return $items;
}
function redirect_add_contest($node) {
  global $base_url;
  $query = array();
  $query['tournament_id'] = $node->nid;
  $query['destination'] = 'node/' . $node->nid;

  drupal_goto(
    $base_url . '/node/add/golf-contest', 
    array(
      'alias' => TRUE,
      'query' => $query
    ), 
    302);

  return FALSE;
}

function add_contest_permissions($node) {
  return ($node->type == 'golf_tournament') && user_access('administer nodes');
}

function redirect_add_round($node) {
  global $base_url;
  $query = array();
  $query['contest_id'] = $node->nid;
  $query['destination'] = 'node/' . $node->nid;

  drupal_goto(
    $base_url . '/node/add/golf-round', 
    array(
      'query' => $query,
      'alias' => TRUE
    ), 
    302);

  return FALSE;
}


function add_round_permissions($node) {
  return ($node->type == 'golf_contest') && user_access('administer nodes');
}

